//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)

//{{LSL_DEFINES
#define ARRAY_SIZE 20
//}}LSL_DEFINES

//{{LSL_DECLARATION
#include "..\..\Source\cConstants.h"

(*!
<Class
	Name               = "Class0"
	Revision           = "0.0"
	GUID               = "{B8400413-2B42-415B-9E1C-B50DE06CC02C}"
	RealtimeTask       = "false"
	CyclicTask         = "true"
	DefCyclictime      = "100 ms"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)">
	<Channels>
		<Server Name="ClassSvr" GUID="{C8D1DDD9-0038-463B-B31C-E9591FEA5CB4}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="fMaxResult" GUID="{BC430DF8-B0E7-44AD-A2B3-04E9A8206FB3}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="fMinArrayResult" GUID="{599CB7CC-59FA-4372-80AE-F6B8A234182B}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="fMinResult" GUID="{FBE552F4-9FD4-475F-B1D5-47BBD52EF5C0}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
	</Channels>
	<Dependencies>
		<Files>
			<File Path=".\Source\math.c"/>
			<File Path=".\Source\cConstants.h" Include="true"/>
			<File Path=".\Source\randomizer.c"/>
		</Files>
	</Dependencies>
</Class>
*)
Class0 : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	fMinResult 	: SvrCh_REAL;
	fMaxResult 	: SvrCh_REAL;
	fMinArrayResult 	: SvrCh_REAL;
  //Clients:
  //Variables:
		fTestValue0 	: REAL;
		fTestValue1 	: REAL;
		aTestData : ARRAY [0..ARRAY_SIZE] OF REAL;

  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL CyWork
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB Class0::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_CLASS0
0$UINT, 0$UINT, (SIZEOF(::Class0))$UINT, 
4$UINT, 0$UINT, 0$UINT, 
TO_UDINT(1594949027), "Class0", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::Class0.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::Class0.fMinResult.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(793086741), "fMinResult", 
(::Class0.fMaxResult.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4172167508), "fMaxResult", 
(::Class0.fMinArrayResult.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3715294436), "fMinArrayResult", 
//Clients:
END_FUNCTION


#define USER_CNT_Class0 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_Class0] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION Class0::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_Class0, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Init		:= #Init();
	vmt.CmdTable.CyWork		:= #CyWork();
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
Function Global __cdecl fMin
VAR_INPUT
  CMP1 : REAL;
  CMP2 : REAL; 
END_VAR
VAR_OUTPUT
  Q : REAL;
END_VAR;

Function Global __cdecl aMin
VAR_INPUT
  INPUT : ^REAL;
  SIZE : DINT; 
END_VAR
VAR_OUTPUT
  Q : REAL;
END_VAR;

Function Global __cdecl linCongGen
VAR_INPUT 
  INPUT : DINT;
  FACTOR : DINT; 
  INCREMENT : DINT; 
  MODULO : DINT; 
END_VAR
VAR_OUTPUT
  Q : DINT;
END_VAR;

(*
 cConstants.h && randomizer.c are also custom functions of the https://github.com/Jumag-Dampferzeuger-GmbH/SIGMATEK-Jumag-Utils Repo 
 which are only necessary for creating pseudo data for the array
*)

FUNCTION VIRTUAL GLOBAL Class0::CyWork
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR

  
  // get the min Values 
  fMinResult      := fMin(CMP1:= fTestValue0 , CMP2:= fTestValue1);
  fMinArrayResult := aMin(INPUT:=#aTestData[0], SIZE:=ARRAY_SIZE);
  
  

	state := READY;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Class0::Init 
  VAR
  	i : SINT; 
  END_VAR
  // Create pseudo data

    fTestValue0 := 234.0;
    fTestValue1 := 345345.0;
    
    for i := 0 to ARRAY_SIZE by 1 do
      aTestData[i] := to_real(linCongGen(INPUT:=i, FACTOR:=i+1, INCREMENT:=i*3, MODULO:=1000)); 
    end_for;


END_FUNCTION
