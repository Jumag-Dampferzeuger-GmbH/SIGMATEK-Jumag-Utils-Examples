//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "tof"
	Revision           = "0.0"
	GUID               = "{653E8BF3-5108-493F-BA43-0A43F5184641}"
	RealtimeTask       = "false"
	CyclicTask         = "true"
	DefCyclictime      = "100 ms"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)">
	<Channels>
		<Server Name="ClassSvr" GUID="{97C06868-C5C4-4C30-A86A-7A04C7C82E76}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="elapsedTime" GUID="{3F4B7D44-C3FF-4AE7-BA6D-5013B6BE3510}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="input" GUID="{3EB9B1B5-7347-43EC-9233-FAF6ACE818D7}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="targetTime" GUID="{E2E6B492-1684-468D-87E8-B2F1BED05C88}" Visualized="false" Initialize="true" DefValue="10000" WriteProtected="false" Retentive="false"/>
		<Server Name="timeStamp" GUID="{EAEEEBE3-13F2-457E-AB19-F818E65DCA17}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
	</Channels>
	<Dependencies>
		<Files>
			<File Path=".\Source\delay.c"/>
		</Files>
	</Dependencies>
</Class>
*)
tof : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	input 	: SvrCh_DINT;
	targetTime 	: SvrCh_DINT;
	elapsedTime 	: SvrCh_UDINT;
	timeStamp 	: SvrCh_UDINT;
  //Clients:
  //Variables:
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL CyWork
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB tof::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_TOF
0$UINT, 0$UINT, (SIZEOF(::tof))$UINT, 
5$UINT, 0$UINT, 0$UINT, 
TO_UDINT(2091575313), "tof", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::tof.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::tof.input.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(796717159), "input", 
(::tof.targetTime.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3866148469), "targetTime", 
(::tof.elapsedTime.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1280260988), "elapsedTime", 
(::tof.timeStamp.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3776248017), "timeStamp", 
//Clients:
END_FUNCTION


#define USER_CNT_tof 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_tof] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION tof::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_tof, pCmd := #vmt.CmdTable);
	vmt.CmdTable.CyWork		:= #CyWork();
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	input.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF input.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	targetTime.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF targetTime.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
Function Global __cdecl DelayTof
VAR_INPUT
  IN : BOOL;
  PT : DINT;
  ET : ^UDINT;
  TIMESTAMP : ^UDINT;
  CLOCK : UDINT;
END_VAR
VAR_OUTPUT
  Q : BOOL;
END_VAR;


FUNCTION VIRTUAL GLOBAL tof::CyWork
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR
  VAR
  	x : BOOL; 
  END_VAR


  if (input = 1)  then
    x := true; 
    else 
      x := false; 
  end_if;

  
  ClassSvr := DelayTof(IN:=x, PT:=targetTime, ET:=#elapsedTime, TIMESTAMP:=#timestamp, CLOCK:=ops.tAbsolute);
  

	state := READY;

END_FUNCTION
